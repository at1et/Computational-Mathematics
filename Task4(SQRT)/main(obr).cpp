#include <iostream>
#include <vector>
#include <cmath> // Для использования функции sqrt

using namespace std;

// Функция для вывода матрицы на экран.
// Принимает ссылку на двумерный вектор типа double.
void printMatrix(vector<vector<double>>& mat) {
    // Проходим по каждой строке матрицы.
    for (int i = 0; i < mat.size(); i++) {
        // Проходим по каждому элементу в строке.
        for (int j = 0; j < mat[0].size(); j++) {
            cout << mat[i][j] << " "; // Вывод элемента с пробелом.
        }
        cout << endl; // Переход на новую строку после вывода всей строки матрицы.
    }
}

int main() {
    const int n = 5; // Размер матрицы (число строк и столбцов).

    // Определение исходной симметричной матрицы A.
    vector<vector<double>> A = {
        {9, 7, 3, 6, 1},
        {7, 9, 3, 7, 3},
        {3, 3, 8, 4, 2},
        {6, 7, 4, 9, 3},
        {1, 3, 2, 3, 2}
    };

    // Объявляем матрицы, необходимые для вычислений:
    // L - нижнетреугольная матрица, которая будет получена методом разложения Холецкого.
    // Y - матрица, обратная к L, такая что L * Y = I (единичная матрица).
    // AInv - матрица, обратная к исходной матрице A.
    vector<vector<double>> L(n, vector<double>(n, 0));
    vector<vector<double>> Y(n, vector<double>(n, 0));
    vector<vector<double>> AInv(n, vector<double>(n, 0));

    // Этап №1: Разложение матрицы A методом Холецкого для получения матрицы L 

    // Первоначально заполняем первый столбец матрицы L.
    // Для первого элемента L[0][0] берём квадратный корень из A[0][0].
    // Для остальных элементов первого столбца используем формулу L[i][0] = A[i][0] / L[0][0].
    for (int i = 0; i < n; i++) {
        L[i][0] = sqrt(A[i][0]); // Вычисляем корень квадратный из A[i][0].
    }
    for (int i = 1; i < n; i++) {
        L[i][0] = A[i][0] / L[0][0]; // Делим элемент A[i][0] на L[0][0].
    }

    // Вычисляем оставшиеся элементы матрицы L.
    // Переменная k обозначает текущий столбец (и строку) для диагонального элемента.
    for (int k = 1; k < n; k++) {
        double sqSum = 0; // Переменная для накопления суммы квадратов предыдущих элементов строки k.
        // Суммируем квадраты элементов L[k][m] для m от 0 до k-1.
        for (int m = 0; m < k; m++) {
            sqSum += L[k][m] * L[k][m];
        }
        // Диагональный элемент L[k][k] вычисляется по формуле:
        // L[k][k] = sqrt(A[k][k] - сумма квадратов предыдущих элементов).
        L[k][k] = sqrt(A[k][k] - sqSum);

        // Если мы не на последней строке, вычисляем элементы ниже диагонали в столбце k.
        if (k < n - 1) {
            // Для каждой строки i от k+1 до n-1:
            for (int i = k + 1; i < n; i++) {
                double pairSum = 0; // Накопитель для суммы произведений элементов строк i и k.
                // Суммируем произведения L[i][m] и L[k][m] для m от 0 до k-1.
                for (int m = 0; m < k; m++) {
                    pairSum += L[i][m] * L[k][m];
                }
                // Элемент L[i][k] вычисляется по формуле:
                // L[i][k] = (A[i][k] - сумма произведений) / L[k][k].
                L[i][k] = (A[i][k] - pairSum) / L[k][k];
            }
        }
    }

    // Этап №2: Вычисление обратной матрицы к L (обозначаем её как Y) 
    // Решаем систему L * Y = I, где I – единичная матрица.
    // Поскольку L – нижнетреугольная матрица, Y также будет нижнетреугольной.
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (j > i) {
                // Если номер столбца больше номера строки, элемент Y[i][j] равен 0.
                Y[i][j] = 0;
            }
            else if (j == i) {
                // Диагональные элементы Y вычисляются как обратные к диагональным элементам L:
                // Y[i][i] = 1 / L[i][i].
                Y[i][j] = 1 / L[i][i];
            }
            else {
                // Для элементов ниже диагонали (j < i) применяем рекуррентную формулу.
                double sum = 0;
                // Суммируем произведения L[i][m] и Y[m][j] для m от j до i-1.
                for (int m = j; m < i; m++) {
                    sum += L[i][m] * Y[m][j];
                }
                // Вычисляем элемент Y[i][j] по формуле:
                // Y[i][j] = - (сумма) / L[i][i].
                Y[i][j] = -sum / L[i][i];
            }
        }
    }

    // Этап №3: Вычисление обратной матрицы к A (обозначаем её как AInv)
    // Используем тот факт, что A = L * L^T, а обратная матрица A^-1 вычисляется как:
    // A^-1 = (L^-1)^T * L^-1. Здесь L^-1 обозначена матрицей Y.
    // Поэтому элемент AInv[i][j] вычисляется как скалярное произведение i-го и j-го столбцов матрицы Y.
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            AInv[i][j] = 0; // Инициализируем элемент AInv[i][j] нулем.
            // Суммируем произведения соответствующих элементов столбцов матрицы Y.
            for (int m = 0; m < n; m++) {
                AInv[i][j] += Y[m][i] * Y[m][j];
            }
        }
    }

    // Вывод полученной обратной матрицы AInv.
    cout << "Matrix AInv:\n";
    printMatrix(AInv);

    return 0;
}
