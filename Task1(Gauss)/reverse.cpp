#include <iostream>
#include <vector>
#include <iomanip>  // Для форматированного вывода чисел

using namespace std;

// Функция для красивого вывода матрицы
void printMatrix(vector<vector<double>>& mat) {
    for (int i = 0; i < mat.size(); i++) {
        for (int j = 0; j < mat[0].size(); j++) {
            // Форматирование: 8 символов на число, 3 знака после запятой
            cout << setw(8) << fixed << setprecision(3) << mat[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    // Количество уравнений в системе
    int n = 5;

    // Расширенная матрица системы (последний столбец - свободные члены)
    vector<vector<double>> B = {
         {3, 8, 2, 2, 8, 1},
         {4, 5, 9, 9, 9, 2},
         {2, 9, 8, 9, 6, 3},
         {4, 3, 7, 4, 3, 4},
        {3, 1, 9, 8, 4, 5}
    };

    // Основной цикл метода Жордана-Гаусса
    for (int k = 0; k < n; k++) {
        // Этап 1: Выбор ведущего элемента (частичный выбор)
        // Ищем строку с максимальным элементом в k-м столбце
        int pivot_row = k;
        for (int i = k + 1; i < n; ++i) {
            if (abs(B[i][k]) > abs(B[pivot_row][k])) {
                pivot_row = i;
            }
        }

        // Меняем местами текущую строку и строку с ведущим элементом
        swap(B[k], B[pivot_row]);

        // Проверка на нулевой ведущий элемент
        double pivot = B[k][k];
        if (pivot == 0) {
            cerr << "Ошибка: система не имеет единственного решения!" << endl;
            return 1;
        }

        // Этап 2: Нормировка ведущей строки
        // Делим все элементы ведущей строки на ведущий элемент
        for (int j = k; j < n + 1; j++) {
            B[k][j] /= pivot;
        }

        // Этап 3: Исключение переменной из остальных уравнений
        for (int i = 0; i < n; i++) {
            if (i != k) {  // Пропускаем ведущую строку
                double factor = B[i][k];  // Коэффициент для исключения
                for (int j = k; j < n + 1; j++) {
                    // Вычитаем из текущей строки ведущую строку, умноженную на коэффициент
                    B[i][j] -= factor * B[k][j];
                }
            }
        }

        // Вывод промежуточной матрицы
        cout << "Состояние матрицы после шага " << k + 1 << ":\n";
        printMatrix(B);
        cout << "\n";  // Пустая строка для разделения итераций
    }

    // Финальный вывод решения
    cout << "Результат решения системы:\n";
    for (int i = 0; i < n; i++) {
        // Последний столбец расширенной матрицы содержит решения
        cout << "x" << i + 1 << " = " << B[i][n] << endl;
    }

    return 0;
}
